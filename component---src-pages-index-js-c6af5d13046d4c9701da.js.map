{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","_ref","data","a","createElement","title","keywords","className","href","target","rel","allMarkdownRemark","edges","map","post","to","node","frontmatter","path","date","info","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Layout","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_public_static_d_755544856_json__WEBPACK_IMPORTED_MODULE_0__","SEO","description","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-c6af5d13046d4c9701da.js","sourcesContent":["import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nconst IndexPage = ({ data }) => (\r\n  <Layout>\r\n    <SEO title=\"Home\" keywords={[`David Crandall`, `web developer`, `react`]} />\r\n    {/* <Navbar />     */}\r\n    <div className=\"grid--aside\">\r\n      <header className=\"header rel\">\r\n        <div className=\"cover flex--center flex--col\">\r\n          <h1>David Crandall</h1>\r\n          <h3>Full Stack Web Developer</h3>\r\n          <p className=\"content\">\r\n            I am {` `}\r\n            <a\r\n              href=\"https://crandall.dev\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {' '}\r\n              David Crandall\r\n            </a>{' '}\r\n            {` `}\r\n            and this is where I write about programming. You may find the code\r\n            for most of my projects on {` `}{' '}\r\n            <a href=\"https://github.com/dacrands\">my github.</a>\r\n          </p>\r\n        </div>\r\n      </header>\r\n      <nav className=\"pages\">\r\n        {data.allMarkdownRemark.edges.map(post => {\r\n          return (\r\n            <Link className=\"pages__link\" to={post.node.frontmatter.path}>\r\n              <div className=\"pages__link-title\">\r\n                <h4>{post.node.frontmatter.title}</h4>\r\n                <small>{post.node.frontmatter.date}</small>\r\n              </div>\r\n              <div className=\"pages__link-desc\">\r\n                <p>{post.node.frontmatter.info}</p>\r\n              </div>\r\n            </Link>\r\n          )\r\n        })}\r\n      </nav>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            path\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            info\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IndexPage\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport '../styles/main.scss'\r\n\r\nconst Layout = ({ children }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query SiteTitleQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <>\r\n        <div>{children}</div>\r\n      </>\r\n    )}\r\n  />\r\n)\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}