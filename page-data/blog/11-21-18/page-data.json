{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/11-21-18","webpackCompilationHash":"8d01a7d9010ec5c34bf7","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://i.imgur.com/LE7G4bH.jpg\" alt=\"flask file app\"></p>\n<p>I recently built a file-hosting application using Flask. Nothing fancy â€” users can upload, download, and delete files. The catch, however, is that the files are saved directly on the server, and that's not good. </p>\n<p>It's not good because I need that server space, and common file types (e.g., images, powerpoints, etc.) can be <strong>massive</strong>. Consequently, it won't be very long until I run out of memory and things go horribly wrong.</p>\n<p>The solution is to host your files on an <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a>, which is quite easy thanks to the library <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\">boto3</a>. I will dedicate another post to discuss how I converted this app from hosting the files from the server to S3 (namely because I am still building the S3 version), but first let's look at the <strong>wrong</strong> way to create a file-hosting app.</p>\n<h2>Introduction</h2>\n<hr>\n<p>This application is a highly modified version of <a href=\"http://flask.pocoo.org/docs/1.0/patterns/fileuploads/\">Flask's documentation on file-uploading</a>. Before I present the code, here are a few key-points:</p>\n<ul>\n<li>\n<p><strong>It's important to designate what files users can upload.</strong> This ensures no one will upload a file that runs on our server and causes damage, such as those with a <em>.bash</em> file-extension.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ALLOWED_EXTENSIONS <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'docx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xlsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><strong>You need to secure your file names.</strong> We import <em>secure_filename</em> from <em>werkzeug</em> to, well, secure our filenames before saving it. Here is a description of <em>secure_filename</em> from the docs:</p>\n<blockquote>\n<p>Pass it a filename and it will return a secure version of it. This filename can then safely be stored on a regular file system and passed to os.path.join(). The filename returned is an ASCII only string for maximum portability.</p>\n</blockquote>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p><strong>os library does the heavy lifting.</strong> We need to use the <em>os</em> library to create/delete folders for each user and save/delete files to/from the local machine. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># Grab the user folder</span>\nuser_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n                            <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Save the uploaded file(s) to the user's dir</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>user_file_path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n</ul>\n<p>Now that we covered some of the key points, let us take a look at some code.</p>\n<!-- Once users authenticate their account, they may upload files with the following extensions:\n\n\n| Office | Images | Other |\n|:------:|:-----:|:-----:|\n| docx | jpg  | pdf  |\n| xlsx | png  | txt  |\n| ppt  | gif  |      |\n\nThese file extensions reflect what I would typically keep on Google drive, Dropbox, or a USB drive. \n\n```python\nALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'docx', 'xlsx'])\n\n``` -->\n<br />\n<h2>The Heart of the App</h2>\n<hr>\n<p>Here is the primary logic of the application. It has not been refactored or cleaned up at all since I've been converting this to <em>S3</em>. If I were to modify this, I would move the file validation and saving logic to separate functions, but for the purposes of this tutorial having all the logic in one place is more convenient.</p>\n<p>If the code below doesn't make much sense, don't worry. In the next section I will be break down precisely what's happening here.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> render_template<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> flash<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> \\\n    url_for<span class=\"token punctuation\">,</span> send_from_directory\n<span class=\"token keyword\">from</span> flask_login <span class=\"token keyword\">import</span> login_user<span class=\"token punctuation\">,</span> logout_user<span class=\"token punctuation\">,</span> current_user<span class=\"token punctuation\">,</span> login_required\n<span class=\"token keyword\">from</span> werkzeug<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> secure_filename\n<span class=\"token keyword\">from</span> werkzeug<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url_parse\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app<span class=\"token punctuation\">,</span> db\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User<span class=\"token punctuation\">,</span> File\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> LoginForm<span class=\"token punctuation\">,</span> RegistrationForm<span class=\"token punctuation\">,</span> DeleteUserForm\n\nALLOWED_EXTENSIONS <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'docx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xlsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">allowed_file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'.'</span> <span class=\"token keyword\">in</span> filename <span class=\"token keyword\">and</span> \\\n           filename<span class=\"token punctuation\">.</span>rsplit<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> ALLOWED_EXTENSIONS\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n@login_required\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    files <span class=\"token operator\">=</span> current_user<span class=\"token punctuation\">.</span>files\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># check if the post request has the file part</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'file'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">:</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'No file part'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># if user does not select file, browser also</span>\n        <span class=\"token comment\"># submit an empty part without filename</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'No selected file'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">and</span> allowed_file<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            filename <span class=\"token operator\">=</span> secure_filename<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># see if user has file of same name</span>\n            <span class=\"token comment\"># if so, prompt them to rename the file</span>\n            <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>                \n                <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> filename<span class=\"token punctuation\">:</span>\n                    flash<span class=\"token punctuation\">(</span><span class=\"token string\">'You already have a file with that name! Please rename your file and upload.'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># make user's dir using ID</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            user_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>user_file_path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            user_file <span class=\"token operator\">=</span> File<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>user_file_path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                             rel_path<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                                 <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                             name<span class=\"token operator\">=</span>filename<span class=\"token punctuation\">,</span>\n                             user_id<span class=\"token operator\">=</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n            db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>user_file<span class=\"token punctuation\">)</span>\n            db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'File uploaded!'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> files<span class=\"token operator\">=</span>files<span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>current_user<span class=\"token punctuation\">)</span></code></pre></div>\n<br />\n<h2>Uploading Files</h2>\n<hr>\n<p>I won't delve into the authentication aspect of this application because it's fairly trivial. In terms of the file-uploading, users must be logged in to upload and download files. Additionally, users are unable to modify or access the files of other users.</p>\n<p>Now let's take a look at the file-uploading logic. </p>\n<h3>Check the File(s)</h3>\n<p>Before a user upload's a file, we need to check a number of things.</p>\n<ol>\n<li>\n<p>Is the <em>POST</em> request sending files?</p>\n<p>We only want to be implementing logic if user is uploading files, otherwise\nsomeone is using the route improperly and will be redirected.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token string\">'file'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">:</span>\n    flash<span class=\"token punctuation\">(</span><span class=\"token string\">'No file part'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Check to see if there is a file in the request.</p>\n<p>So we already know that the response object contains the files key,\nbut does it contain any files? That's what is being asked here.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># if user does not select file, browser also</span>\n<span class=\"token comment\"># submit an empty part without filename</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n    flash<span class=\"token punctuation\">(</span><span class=\"token string\">'No selected file'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Make sure we support the file extension and pass it to <em>secure_filename</em> (described above)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">and</span> allowed_file<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filename <span class=\"token operator\">=</span> secure_filename<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Ensure user doesn't already have a file with the same name.</p>\n<p> Currently, each user has one folder to upload files to.\nThus, to prevent naming collisions, each file name must be unique.\nNote the filename includes the extension, so a user can\nhave <em>user.docx</em> file and <em>user.ppt</em> file but not two <em>user.docx</em> files.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>                \n    <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> filename<span class=\"token punctuation\">:</span>\n        flash<span class=\"token punctuation\">(</span><span class=\"token string\">'You already have a file with that name! Please rename your file and upload.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n</li>\n</ol>\n<h3>User Folders</h3>\n<p>All files are uploaded to an <em>UPLOAD_FOLDER</em> whose location is configured in <em>config.py</em> â€” all user folders are a child of this folder.</p>\n<p>Each user has a designated directory to upload files to, which is named using the user's id.\nWhenever a user upload's a file, we check to see if this user has a folder via <em>os.path.exists()</em>. If the user doesn't have a folder, we create one using <em>os.mkdir()</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n        <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>Once we have a folder for our user, we grab its absolute path and save it to a variable.\nThis makes the code a bit cleaner for when we save the file. Note that <em>file</em> is referencing  <em>file = request.files['file']</em> from the <em>POST</em> request described above.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user_file_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'UPLOAD_FOLDER'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>current_user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Save file </span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>user_file_path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>And that's about it in terms of the file-uploading logic. Now let's look at the database for this application.</p>\n<h2>Database</h2>\n<hr>\n<p>First, let's cover some general information. This application's database uses <em>Postgresql</em> for deployment, <em>Sqlite3</em> for development, and was written using the <em>SQLAlchemy</em> ORM. </p>\n<p>The database is built on a one-to-many between the <em>&#x3C;User></em> and <em>&#x3C;File></em> models, i.e., each <em>User</em> has a relationship to many objects in the <em>File</em> table. </p>\n<h3>Schemas</h3>\n<p>Take note of the <em>file</em> attribute on the <em>&#x3C;User></em> model and the <em>user_id</em> attribute on the <em>&#x3C;File></em>, for this is how we connect the two tables.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>UserMixin<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    email <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    password_hash <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    files <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>relationship<span class=\"token punctuation\">(</span><span class=\"token string\">'File'</span><span class=\"token punctuation\">,</span> backref<span class=\"token operator\">=</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> lazy<span class=\"token operator\">=</span><span class=\"token string\">'dynamic'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>password_hash <span class=\"token operator\">=</span> generate_password_hash<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">check_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> check_password_hash<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>password_hash<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;User {}>'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>    \n    user_id <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'user.id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    path <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    rel_path <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;File {}>'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></code></pre></div>\n<br />\n<p>Here I will use a modified version of the <a href=\"https://docs.sqlalchemy.org/en/latest/orm/backref.html\">SQLAlchemy docs</a> to describe what is happening in the <em>file</em> attribute:</p>\n<blockquote>\n<p>The above configuration establishes a collection of File objects on User called User.files. It also establishes a .user attribute on Address which will refer to the parent User object.</p>\n</blockquote>\n<p>I am also using <em>lazy='dynamic'</em>, which is a bit of a controversial issue. Essentially the argument is meant to deal with large databases and loading of collections, though I've uncovered some <a href=\"https://github.com/mitsuhiko/flask-sqlalchemy/issues/435\">discussions on github</a> that indicate it may be not improve performance. Either way, it is a bit beyond the scope of this post.</p>\n<h2>Conclusion</h2>\n<hr>\n<p>That's pretty much it. Despite the fact this project is very practically for the reasons mentioned earlier, it provided my first exposure to file uploading and I learned a fair-amount.</p>\n<p>However, the best thing to come from this application is that is led me to <em>S3</em>, which will enable me to do some really awesome things. </p>","frontmatter":{"date":"November 21, 2018","path":"/blog/11-21-18","title":"How NOT to Create a Dropbox Clone","info":"Before finding out about S3, I built a file-uploading site that saved files directly to the server."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}