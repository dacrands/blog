{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","_ref","data","a","createElement","title","keywords","className","href","target","rel","allMarkdownRemark","edges","map","post","to","node","frontmatter","path","date","info","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Layout","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","Fragment","_public_static_d_755544856_json__WEBPACK_IMPORTED_MODULE_0__","SEO","description","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAkDaI,EAAS,aAiBPO,UA9DG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAChBP,EAAAQ,EAAAC,cAACN,EAAA,EAAD,KACEH,EAAAQ,EAAAC,cAACL,EAAA,EAAD,CAAKM,MAAM,OAAOC,SAAU,6CAE5BX,EAAAQ,EAAAC,cAAA,OAAKG,UAAU,eACbZ,EAAAQ,EAAAC,cAAA,UAAQG,UAAU,uBAChBZ,EAAAQ,EAAAC,cAAA,WACET,EAAAQ,EAAAC,cAAA,4BACAT,EAAAQ,EAAAC,cAAA,sCACAT,EAAAQ,EAAAC,cAAA,KAAGG,UAAU,WAAb,YAEEZ,EAAAQ,EAAAC,cAAA,KACEI,KAAK,uBACLC,OAAO,SACPC,IAAI,uBAEH,IALH,kBAOK,IATP,yGAYmC,IACjCf,EAAAQ,EAAAC,cAAA,KAAGI,KAAK,+BAAR,iBAINb,EAAAQ,EAAAC,cAAA,OAAKG,UAAU,SACZL,EAAKS,kBAAkBC,MAAMC,IAAI,SAAAC,GAChC,OACEnB,EAAAQ,EAAAC,cAACP,EAAA,KAAD,CAAMU,UAAU,cAAcQ,GAAID,EAAKE,KAAKC,YAAYC,MACtDvB,EAAAQ,EAAAC,cAAA,OAAKG,UAAU,qBACbZ,EAAAQ,EAAAC,cAAA,UAAKU,EAAKE,KAAKC,YAAYZ,OAC3BV,EAAAQ,EAAAC,cAAA,aAAQU,EAAKE,KAAKC,YAAYE,OAEhCxB,EAAAQ,EAAAC,cAAA,OAAKG,UAAU,oBACbZ,EAAAQ,EAAAC,cAAA,SAAIU,EAAKE,KAAKC,YAAYG,gDCxC1C/B,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAA8B,IAAAhC,EAAAG,EAAAD,EAAA,uCAAA+B,IAAAjC,EAAAG,EAAAD,EAAA,gCAAAgC,IAAA,IAAA7B,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAA8B,EAAAnC,EAAA,GAAAoC,EAAApC,EAAAO,EAAA4B,GAAAE,EAAArC,EAAA,KAAAsC,EAAAtC,EAAAO,EAAA8B,GAAArC,EAAAG,EAAAD,EAAA,yBAAAoC,EAAAxB,IAAAd,EAAAG,EAAAD,EAAA,+BAAAmC,EAAA,aAAArC,EAAAG,EAAAD,EAAA,6BAAAmC,EAAA,WAAArC,EAAAG,EAAAD,EAAA,yBAAAmC,EAAA,OAAArC,EAAAG,EAAAD,EAAA,4BAAAmC,EAAA,UAAArC,EAAAG,EAAAD,EAAA,+BAAAmC,EAAA,iBAAAE,EAAAvC,EAAA,KAAAwC,EAAAxC,EAAAO,EAAAgC,GAAAvC,EAAAG,EAAAD,EAAA,iCAAAsC,EAAA1B,IAAA,IAAA2B,EAAAzC,EAAA,IAAAA,EAAAG,EAAAD,EAAA,8BAAAuC,EAAA,IAYA,IAAMR,EAAqBS,IAAMC,cAAc,IAEzCT,EAAc,SAAAU,GAAK,OACvBtC,EAAAQ,EAAAC,cAACkB,EAAmBY,SAApB,KACG,SAAAC,GACC,OACEF,EAAM/B,MACLiC,EAAgBF,EAAMG,QAAUD,EAAgBF,EAAMG,OAAOlC,MAEtD+B,EAAMI,QAAUJ,EAAMK,UAC5BL,EAAM/B,KAAO+B,EAAM/B,KAAKA,KAAOiC,EAAgBF,EAAMG,OAAOlC,MAGvDP,EAAAQ,EAAAC,cAAA,uCAaf,SAASiB,IACP,MAAM,IAAIkB,MACR,gVATJhB,EAAYiB,UAAY,CACtBtC,KAAMuC,IAAUC,OAChBN,MAAOK,IAAUE,OAAOC,WACxBP,OAAQI,IAAUI,KAClBP,SAAUG,IAAUI,2BCnCtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAlD,GAAkB,IAAfmD,EAAenD,EAAfmD,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOzB,IAAM3B,cAAcqD,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,QAIrBT,EAAiBX,UAAY,CAC3BY,SAAUX,IAAUoB,MAAM,CACxBL,SAAUf,IAAUE,OAAOC,aAC1BA,YAGUO,oGCfTW,UAAS,SAAA7D,GAAA,IAAGqC,EAAHrC,EAAGqC,SAAH,OACbyB,EAAA5D,EAAAC,cAAC4D,EAAA,YAAD,CACE5B,MAAK,YASLC,OAAQ,SAAAnC,GAAI,OACV6D,EAAA5D,EAAAC,cAAA2D,EAAA5D,EAAA8D,SAAA,KACEF,EAAA5D,EAAAC,cAAA,WAAMkC,KAZZpC,KAAAgE,MAkBFJ,EAAOtB,UAAY,CACjBF,SAAUG,IAAUzB,KAAK4B,YAGZkB,uNCxBf,SAASK,EAATlE,GAA2D,IAA5CmE,EAA4CnE,EAA5CmE,YAAaC,EAA+BpE,EAA/BoE,KAAMC,EAAyBrE,EAAzBqE,KAAMhE,EAAmBL,EAAnBK,SAAUD,EAASJ,EAATI,MAChD,OACE0D,EAAA5D,EAAAC,cAACmE,EAAA,YAAD,CACEnC,MAAOoC,EACPnC,OAAQ,SAAAnC,GACN,IAAMuE,EACJL,GAAelE,EAAKwE,KAAKC,aAAaP,YACxC,OACEL,EAAA5D,EAAAC,cAACwE,EAAAzE,EAAD,CACE0E,eAAgB,CACdR,QAEFhE,MAAOA,EACPyE,cAAa,QAAU5E,EAAKwE,KAAKC,aAAatE,MAC9CiE,KAAM,CACJ,CACES,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAS3E,GAEX,CACE4E,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAS9E,EAAKwE,KAAKC,aAAaO,QAElC,CACEH,KAAI,gBACJC,QAAS3E,GAEX,CACE0E,KAAI,sBACJC,QAASP,IAGVU,OACC7E,EAAS8E,OAAS,EACd,CACEL,KAAI,WACJC,QAAS1E,EAAS+E,KAAT,OAEX,IAELF,OAAOb,MAtDlBpE,KAAAoF,IA8DJnB,EAAIoB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNhE,SAAU,IAGZ6D,EAAI3B,UAAY,CACd4B,YAAa3B,IAAUE,OACvB0B,KAAM5B,IAAUE,OAChB2B,KAAM7B,IAAU+C,MAChBlF,SAAUmC,IAAUgD,QAAQhD,IAAUE,QACtCtC,MAAOoC,IAAUE,OAAOC,YAGXuB,MAEf,IAAMK,EAAY","file":"component---src-pages-index-js-d25ab68af3cb82e96267.js","sourcesContent":["import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nconst IndexPage = ({ data }) => (\r\n  <Layout>\r\n    <SEO title=\"Home\" keywords={[`David Crandall`, `web developer`, `react`]} />\r\n    {/* <Navbar />     */}\r\n    <div className=\"flex-center\">\r\n      <header className=\"header header--flex\">\r\n        <div>\r\n          <h1>David Crandall</h1>\r\n          <h3>Full Stack Web Developer</h3>\r\n          <p className=\"content\">\r\n            I am {` `}\r\n            <a\r\n              href=\"https://crandall.dev\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {' '}\r\n              David Crandall\r\n            </a>{' '}\r\n            {` `}\r\n            and this is where I write about programming. You may find the code\r\n            for most of my projects on {` `}{' '}\r\n            <a href=\"https://github.com/dacrands\">my github.</a>\r\n          </p>\r\n        </div>\r\n      </header>\r\n      <nav className=\"pages\">\r\n        {data.allMarkdownRemark.edges.map(post => {\r\n          return (\r\n            <Link className=\"pages__link\" to={post.node.frontmatter.path}>\r\n              <div className=\"pages__link-title\">\r\n                <h4>{post.node.frontmatter.title}</h4>\r\n                <small>{post.node.frontmatter.date}</small>\r\n              </div>\r\n              <div className=\"pages__link-desc\">\r\n                <p>{post.node.frontmatter.info}</p>\r\n              </div>\r\n            </Link>\r\n          )\r\n        })}\r\n      </nav>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            path\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            info\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IndexPage\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport '../styles/main.scss'\r\n\r\nconst Layout = ({ children }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query SiteTitleQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <>\r\n        <div>{children}</div>\r\n      </>\r\n    )}\r\n  />\r\n)\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}