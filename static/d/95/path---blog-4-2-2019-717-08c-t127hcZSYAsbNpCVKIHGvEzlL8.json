{"data":{"markdownRemark":{"html":"<p>\n<em>This is part 1 of a 2 part series where I will discuss my first technical phone screen with a senior engineer. In part two I will discuss the on-site technical interview.</em></p>\n<p>I will start by saying I did not get the position. Yes, very sad, I know. But that's okay. This was the eigth developer job I applied too, and as of right now the the most recent dev job I applied for. The main reason for the slow down in applications is because I want to add my <a href=\"https://files.crandall.dev\">super cool file-hosting application</a> to my resume before sending out more apps — wouldn't you?</p>\n<p>Anyway, I bring up the numbers in part to demonstrate that someone who is a self-taught with a B.A. in psychology and no Bootcamp can get interviews for web dev positions in NYC. All of this stuff can be learned for free and it will lead to interviews for jobs that pay well — that's pretty cool.</p>\n<h2>The Phoner</h2>\n<p>I was emailed by the senior engineer saying she liked my portfolio and would like to set up a phone-screen. </p>\n<p>So the soft questions were about why I wanted to be a dev, what I like about coding, etc. Nothing crazy, but questions you should have concise answers to committed to memory. Now to the technical screen... </p>\n<!-- Quick anecdote, it sounded like the interviewer was on speaker in a stair-well. I could barely hear her, but I didn't want to say as much becuase I didn't want her associate my phoner with any negativity &mdash; burdened by a psych degree it seems. -->\n<h2>Technical Questions</h2>\n<p><em>Note: These responses are to the best of my recollection, and I assure you there are not verbatim. That said, I tried to be as accurate as possible</em></p>\n<h3>What is hoisting in JavaScript?</h3>\n<blockquote>\n<p>JavaScript defines functions first so you can reference them before they are declared. For example, in Python if you have a function <code class=\"language-text\">getName</code> and you call it before you declare the <code class=\"language-text\">getName</code> function you will get an error <code class=\"language-text\">getName</code> is not defined.</p>\n</blockquote>\n<p>She accepted this, and it's basically correct. Basically JS will allocate functions in memory first, versus literally \"hoisting\" functions to the top of the code. Either way, I passed.</p>\n<h3>What is the difference between <code class=\"language-text\">display: inline</code> and <code class=\"language-text\">display: block</code></h3>\n<p><em>My Answer</em> \"Display block elements will have their paddings and margins respected, whereas inline elements will not.\"</p>\n<p>Eh, more or less. Though I am somewhat correct, a more precise answer would be that <code class=\"language-text\">block</code> elements add line-breaks after the element, whereas this is not so with <code class=\"language-text\">display: inline</code> elements.</p>\n<h3>What is the difference between <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code>, and <code class=\"language-text\">var</code>?</h3>\n<p>This ended up snagging me in the on-site — which I will discuss more in depth in a different post — but on the phoner I seemed to have done okay. </p>\n<p><em>My Answer</em> \"<code class=\"language-text\">var</code> is globally scoped, whereas as <code class=\"language-text\">let</code> is scoped at the function level. Objects instantiated with <code class=\"language-text\">const</code> can not be modified.\"</p>\n<p>Again, sort of wiffed this one. The answer really lies in scoping at the global, functional, and block scope; and how these different scopings affect asynschronous actions and iteract with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">closures</a>. Nonetheless, she sort of accepted my answer.</p>\n<h3>What is the difference between <code class=\"language-text\">forEach</code> and <code class=\"language-text\">map</code></h3>\n<p><em>My Answer</em> \"<code class=\"language-text\">map</code> will produce a new list, whereas <code class=\"language-text\">forEach</code> modifies the list in place.\"</p>\n<p>This is an abridged version of my actual response. To my recollection, when answering this question I started delving into features of <code class=\"language-text\">reduce</code>, etc. Either way, I believe she accepted my response, but it was far from concise.</p>\n<h3>You have an element with an <code class=\"language-text\">evenListener</code> \"click\" nested within an element with an <code class=\"language-text\">evenListener</code> \"click.\" If you click on the inner element will the <code class=\"language-text\">click eventListener</code> on the outer div fire?</h3>\n<p><em>My answer.</em> \"Yes, because of the event will bubble up\"</p>\n<h3>(Continued from the previous question) How do you stop it?</h3>\n<p><em>My answer.</em> \"I don't know.\"</p>\n<p>I was thinking of saying something like <code class=\"language-text\">e.preventDefault</code>, and it turns out this isn't too far from the actual thing, which is <code class=\"language-text\">e.stopPropagation()</code>.</p>\n<h3>Select an element with class name \"div\"</h3>\n<p>A gimme at the end, I suppose for self-esteem purposes. The answer is <code class=\"language-text\">.div</code></p>\n<h2>Conclusion</h2>\n<p><strong>tldr; they brought me in</strong></p>\n<p>While I didn't get the exact answers, and had no clue about the <code class=\"language-text\">stopPropagation()</code> question, I feel I did okay. In the next post I will talk about the on-site.</p>","frontmatter":{"date":"April 02, 2019","path":"/blog/4-2-2019","title":"My First Technical Interview! Part 1: The Phoner","info":"A review of the phone screen that led to my on-site technical interview."}}},"pageContext":{}}